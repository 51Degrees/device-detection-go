# Template for build and test stage, which tests api on specified agent
parameters:
- name: macImage
- name: windowsImage
- name: runTests
  type: string
  default: 'On'

stages:
- stage: Linux
  dependsOn: []

  jobs:
    - job: Build_and_Test
      displayName: Build and Test
      condition: ne(${{ parameters.runTests }}, 'Off')

      variables: 
        - group: InternalKeys

      strategy:
        matrix:
          Ubuntu 18:
            imageName: 'ubuntu-18.04'
          Ubuntu 20:
            imageName: 'ubuntu-20.04'

      pool:
        vmImage: $(imageName)

      steps:
      - checkout: self
        submodules: recursive
        lfs: true
        persistCredentials: true

      # Install any pre-requisites
      - script: |
          sudo apt-get -y install \
            gcc-multilib \
            g++-multilib        
        displayName: 'Install Required Packages'
      
      #- script: |
      #    wget http://ftp.br.debian.org/debian/pool/main/d/dmalloc/libdmalloc-dev_5.5.2-6_i386.deb
      #    sudo dpkg --add-architecture i386
      #    sudo apt-get -y update
      #    sudo dpkg -i libdmalloc-dev_5.5.2-6_i386.deb
      #    sudo sudo apt-get -y install -f
      #  displayName: 'Install Required 32bit Packages'
      #  condition: and(succeeded(), eq(variables['BuildPlatform'], 'x86'))
      
      - script: |
          sudo apt-get -y install libdmalloc-dev
        displayName: 'Install Required 64bit Packages'
        # condition: and(succeeded(), eq(variables['BuildPlatform'], 'x64'))
        failOnStderr: true

      # Set up the build and test environment

      # Run prebuild
      - powershell: |
          ./dd/scripts/prebuild.ps1
        displayName: 'Build device detection core binaries'

      # Run test
      - bash: |
          go test ./dd
        displayName: 'Run tests'
        
      # Publish Test Results to Azure Pipelines/TFS
      #- task: PublishTestResults@2
      #  inputs:
      #    testRunner: 'JUnit'
      #    testResultsFiles: '**/test-results.xml'
      #    searchFolder: '$(System.DefaultWorkingDirectory)'
      #    mergeTestResults: false
      #    testRunTitle: '$(phpVersion)'
      #    failTaskOnFailedTests: true
      #  condition: always()
  
      # Build performance tests
      #- script: |
      #    cd performance-tests
      #    sudo apt-get install cmake apache2-dev libapr1-dev libaprutil1-dev
      #    mkdir build
      #    cd build
      #    cmake ..
      #    cmake --build .
      #    cd ..
      #  displayName: 'Build Performance Tests'

      # Run performance tests
      #- script: |
      #    cd performance-tests/build
      #    ./runPerf.sh
      #    cd ..
      #  displayName: 'Run Performance Tests'
      #  failOnStderr: true

- stage: MacOS
  dependsOn: []

  jobs:
    - job: Build_and_Test
      displayName: Build and Test
      condition: ne(${{ parameters.runTests }}, 'Off')

      variables: 
        - group: InternalKeys

      pool:
        vmImage: ${{ parameters.macImage }}

      steps:
      - checkout: self
        submodules: recursive
        lfs: true
        persistCredentials: true

      # Install any pre-requisites
      - script: |
          brew search dmalloc
          brew install dmalloc
        displayName: 'Install Required Packages'
        failOnStderr: true

      # Set up the build and test environment
      - bash: |
          export CC=gcc
          export CXX=g++
        displayName: 'Set compiler to be gcc and g++'

      # Run prebuild
      - powershell: |
          ./dd/scripts/prebuild.ps1
        displayName: 'Build device detection core binaries'

      # Run test
      - bash: |
          go test ./dd
        displayName: 'Run tests'
        
      # Publish Test Results to Azure Pipelines/TFS
      #- task: PublishTestResults@2
      #  inputs:
      #    testRunner: 'JUnit'
      #    testResultsFiles: '**/test-results.xml'
      #    searchFolder: '$(System.DefaultWorkingDirectory)'
      #    mergeTestResults: false
      #    testRunTitle: '$(phpVersion)'
      #    failTaskOnFailedTests: true
      #  condition: always()
  
- stage: Windows
  dependsOn: []

  jobs:
    - job: Build_and_Test
      displayName: Build and Test
      condition: ne(${{ parameters.runTests }}, 'Off')

      variables: 
        - group: InternalKeys

      pool:
        vmImage: ${{ parameters.windowsImage }}

      steps:
      - checkout: self
        submodules: recursive
        lfs: true
        persistCredentials: true

      # Set up the build and test environment
      - bash: |
          export CC=gcc
          export CXX=g++
        displayName: 'Set compiler to be gcc and g++'

      # Run prebuild
      - powershell: |
          ./dd/scripts/prebuild.ps1
        displayName: 'Build device detection core binaries'

      # Run test
      - bash: |
          go test ./dd
        displayName: 'Run tests'
        
      # Publish Test Results to Azure Pipelines/TFS
      #- task: PublishTestResults@2
      #  inputs:
      #    testRunner: 'JUnit'
      #    testResultsFiles: '**/test-results.xml'
      #    searchFolder: '$(System.DefaultWorkingDirectory)'
      #    mergeTestResults: false
      #    testRunTitle: '$(phpVersion)'
      #    failTaskOnFailedTests: true
      #  condition: always()
