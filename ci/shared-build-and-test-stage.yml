# Template for build and test stage, which tests api on specified agent
parameters:
- name: runTests
  type: string
  default: 'On'
- name: goVersion
  type: string
  default: '1.17.1'

stages:
- stage: Linux
  dependsOn: []

  jobs:
    - job: Build_and_Test
      displayName: Build and Test
      condition: ne(${{ parameters.runTests }}, 'Off')

      variables: 
        - group: InternalKeys

      strategy:
        matrix:
          Ubuntu 18:
            imageName: 'ubuntu-18.04'
          Ubuntu 20:
            imageName: 'ubuntu-20.04'

      pool:
        vmImage: $(imageName)

      steps:
      - checkout: self
        submodules: recursive
        lfs: true
        persistCredentials: true

      # Install any pre-requisites
      - script: |
          sudo apt-get -y install \
            gcc-multilib \
            g++-multilib        
        displayName: 'Install Required Packages'

      # Run prebuild
      - powershell: |
          ./dd/scripts/prebuild.ps1
        displayName: 'Build device detection core binaries'
        workingDirectory: '$(Build.SourcesDirectory)'

      # Install go
      - task: GoTool@0
        displayName: 'Use go ${{ parameters.goVersion }}'
        inputs:
          version: '${{ parameters.goVersion }}'

      # Run test
      - task: Go@0
        displayName: 'Run tests'
        inputs:
          command: test
          arguments: './...'

- stage: MacOS
  dependsOn: []

  jobs:
    - job: Build_and_Test
      displayName: Build and Test
      condition: ne(${{ parameters.runTests }}, 'Off')

      variables: 
        - group: InternalKeys

      strategy:
        matrix:
          MacOS 10.14:
            imageName: 'macOS-10.14'
          MacOS 10.15:
            imageName: 'macOS-10.15'

      pool:
        vmImage: $(imageName)

      steps:
      - checkout: self
        submodules: recursive
        lfs: true
        persistCredentials: true

      # Install go
      - task: GoTool@0
        displayName: 'Use go ${{ parameters.goVersion }}'
        inputs:
          version: '${{ parameters.goVersion }}'

      # Run prebuild
      - powershell: |
          ./dd/scripts/prebuild.ps1
        displayName: 'Build device detection core binaries'
        workingDirectory: '$(Build.SourcesDirectory)'

      # Run test
      - task: Go@0
        displayName: 'Run tests'
        inputs:
          command: test
          arguments: './...'